--!strict
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Stopwatch = require(ReplicatedStorage.Packages.Dex.Observables.Stopwatch)
local State = require(ReplicatedStorage.Packages.Dex.Observables.State)

return function()
    local function waitUntilClockChange()
        local start = os.clock()
        -- selene: allow(empty_loop)
        while os.clock() == start do end
    end

    it("should start the stopwatch and update with new values", function()
        local stopwatch = Stopwatch.new({duration = 5})
        expect(stopwatch:Current()).to.equal(0)

        stopwatch:Play()
        waitUntilClockChange()
        expect(stopwatch:Current()).to.never.equal(0)
    end)

    it("should stop the stopwatch and not update with new values", function()
        local stopwatch = Stopwatch.new({duration = 5})
        expect(stopwatch:Current()).to.equal(0)

        stopwatch:Play()
        waitUntilClockChange()
        local valueAfterStart = stopwatch:Current()
        expect(valueAfterStart).to.never.equal(0)

        stopwatch:Stop()
        waitUntilClockChange()
        expect(stopwatch:Current()).to.equal(0)
    end)

    it("should pause the stopwatch and not update with new values", function()
        local stopwatch = Stopwatch.new({duration = 5})
        expect(stopwatch:Current()).to.equal(0)

        stopwatch:Play()
        waitUntilClockChange()
        local valueAfterStart = stopwatch:Current()
        expect(valueAfterStart).to.never.equal(0)
        stopwatch:Pause()
        valueAfterStart = stopwatch:Current()
        waitUntilClockChange()
        expect(stopwatch:Current()).to.equal(valueAfterStart)
    end)

    it("should set the current time position of the stopwatch", function()
        local stopwatch = Stopwatch.new({duration = 5})
        expect(stopwatch:Current()).to.equal(0)

        stopwatch:Play()
        waitUntilClockChange()
        expect(stopwatch:Current()).to.never.equal(0)

        stopwatch:SetTimePosition(3)
        waitUntilClockChange()
        expect(stopwatch:Current() > 3).to.be.equal(true)
    end)
    
    it("should create a sliced Alpha observable at [2, 4]", function()
        local stopwatch = Stopwatch.new({duration = 5})
        local alphaObservable = stopwatch:Alpha(2, 4)
        expect(alphaObservable).to.be.ok()
        expect(alphaObservable:Current()).to.equal(0)
        stopwatch:Play()
        waitUntilClockChange()
        expect(alphaObservable:Current()).to.equal(0)
    end)
    
    it("should create a sliced Alpha observable at [0, 4]", function()
        local stopwatch = Stopwatch.new({duration = 5})
        local alphaObservable = stopwatch:Alpha(0, 4)
        expect(alphaObservable).to.be.ok()
        stopwatch:Play()
        waitUntilClockChange()
        expect(alphaObservable:Current() == 0).to.be.equal(false)
    end)

    it("Should start immediately when isPlaying is true", function()
        local stopwatch = Stopwatch.new({duration = 5, isPlaying = true})
        local unsub = stopwatch:Subscribe(function() end)
        waitUntilClockChange()
        expect(stopwatch:Current() == 0 ).to.equal(false)
        stopwatch:Stop()
        waitUntilClockChange()
        expect(stopwatch:Current()).to.be.equal(0)
        unsub()
    end)

    it("Should start reactively when isPlaying is observable", function()
        local isPlaying = State.new(false)
        local stopwatch = Stopwatch.new({duration = 5, isPlaying = isPlaying})
        local unsub = stopwatch:Subscribe(function() end)
        waitUntilClockChange()
        expect(stopwatch:Current()).to.equal(0)
        isPlaying:Set(true)
        waitUntilClockChange()
        expect(stopwatch:Current() == 0 ).to.equal(false)
        isPlaying:Set(false)
        waitUntilClockChange()
        expect(stopwatch:Current()).to.be.equal(0)
        unsub()
    end)

    it("Should start reactively when playOnChange is observable", function()
        local trigger = State.new(0)
        local stopwatch = Stopwatch.new({duration = 5, playOnChange = trigger})
        local unsub = stopwatch:Subscribe(function() end)
        waitUntilClockChange()
        expect(stopwatch:Current()).to.equal(0)
        trigger:Set(1)
        waitUntilClockChange()
        expect(stopwatch:Current() == 0 ).to.equal(false)
        stopwatch:Stop()
        waitUntilClockChange()
        expect(stopwatch:Current()).to.be.equal(0)
        trigger:Set(2)
        waitUntilClockChange()
        expect(stopwatch:Current() == 0 ).to.equal(false)
        unsub()
    end)
end
