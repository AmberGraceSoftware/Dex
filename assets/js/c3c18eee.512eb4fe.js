"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5886],{22579:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Chapter1/Directives","title":"VirtualInstance Directives","description":"Dex tries to allow access to all use cases in Roblox\'s Data Model through VirtualInstances.","source":"@site/docs/Chapter1/Directives.md","sourceDirName":"Chapter1","slug":"/Chapter1/Directives","permalink":"/docs/Chapter1/Directives","draft":false,"unlisted":false,"editUrl":"https://github.com/AmberGraceSoftware/Dex/edit/master/docs/Chapter1/Directives.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"defaultSidebar","previous":{"title":"Mapping Child Components","permalink":"/docs/Chapter1/MappingChildComponents"}}');var r=t(74848),a=t(28453);const s={sidebar_position:9},c="VirtualInstance Directives",l={},d=[{value:"Basic Directives",id:"basic-directives",level:2},{value:"Defining Attributes",id:"defining-attributes",level:2},{value:"Defining Tags",id:"defining-tags",level:2},{value:"Connecting Events",id:"connecting-events",level:2},{value:"Listening to Property &amp; Attribute Changed events",id:"listening-to-property--attribute-changed-events",level:2},{value:"FindChild Directive",id:"findchild-directive",level:2},{value:"Combining VirtualInstances",id:"combining-virtualinstances",level:2},{value:"Lifecycle Callbacks",id:"lifecycle-callbacks",level:2},{value:"SubscribeOnMounted directive",id:"subscribeonmounted-directive",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"virtualinstance-directives",children:"VirtualInstance Directives"})}),"\n",(0,r.jsxs)(n.p,{children:["Dex tries to allow access to all use cases in Roblox's ",(0,r.jsx)(n.a,{href:"https://create.roblox.com/docs/projects/data-model",children:"Data Model"})," through VirtualInstances."]}),"\n",(0,r.jsxs)(n.p,{children:["VirtualInstances aim to be as declarative as possible (i.e. described in\nterms of ",(0,r.jsx)(n.em,{children:"how they are put together in relation to state"})," rather than in terms\nof the exact instructions for how to put them together). Dex uses a concept\ncalled ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Directives"})})," to bridge this gap."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Directives"})})," are methods which declare special instructions on how to put\ntogether an instance heirarchy based on application state. They can be ",(0,r.jsx)(n.em,{children:"added"}),"\nto a VirtualInstance but ",(0,r.jsx)(n.em,{children:"never removed."})," Once a VirtualInstance is rendered by\nDex, it becomes ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"frozen"})}),", meaning no more directives can be added or removed\nfrom the VirtualInstance."]}),"\n",(0,r.jsx)(n.h2,{id:"basic-directives",children:"Basic Directives"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsxs)(n.a,{href:"/api/VirtualInstance#SetProperties",children:[":SetProperties","()"]})," and\n",(0,r.jsxs)(n.a,{href:"/api/VirtualInstance#AddChildren",children:[":AddChildren","()"]})," directives define a\nVirtualInstance's properties and children respectively. The first two arguments\nof VirtualInstance constructors (such as ",(0,r.jsx)(n.a,{href:"/api/Dex#New",children:"Dex.New"}),") automatically\nadd a ",(0,r.jsx)(n.code,{children:":SetProperties()"})," and ",(0,r.jsx)(n.code,{children:":AddChildren()"})," directive when defined."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'-- Creating a VirtualInstance with "Properties" and "Children" tables defined:\nlocal virtualInstance1 = Dex.New("Frame", {\n    BackgroundTransparency = 1\n}, {\n    Dex.New("TextLabel")\n})\n\n-- . . . Is equivalent to adding a "SetProperties" and "AddChildren" directive!\nlocal virtualInstance2 = Dex.New("Frame")\nvirtualInstance2:SetProperties({\n    BackgroundTransparency = 1,\n})\nvirtualInstance2:AddChildren({\n    Dex.New("TextLabel"),\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can add these directives multiple times to split up the logic of a UI\ncomponent:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Component(props: {\n    layoutOrder: number,\n    coins: Dex.Observable<number>,\n})\n    -- Layout\n    local label = Dex.New("TextLabel", {\n        LayoutOrder = props.layoutOrder\n    })\n\n    -- Coins display\n    label:SetProperties({\n        Text = props.coins:Map(function(currentCoins)\n            return string.format("%.2f", currentCoins)\n        end)\n    })\n\n    return label\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The previous section also goes over the ",(0,r.jsxs)(n.a,{href:"./MappingChildComponents",children:[(0,r.jsx)(n.code,{children:":MapChildren()"}),",\n",(0,r.jsx)(n.code,{children:":MapChildrenByKey()"}),", and\n",(0,r.jsx)(n.code,{children:":MapChildrenByValue()"})," directives"]}),", which are more\noptimized ways of specifying the children of a VirtualInstance."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's go over a few more ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Directives"})})," and their use cases."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-attributes",children:"Defining Attributes"}),"\n",(0,r.jsxs)(n.p,{children:["Dex can render attributes in a similar way to properties by adding a\n",(0,r.jsx)(n.code,{children:":SetAttributes()"})," directive. This takes in a table that can hold both ",(0,r.jsx)(n.em,{children:"Static"}),"\nand ",(0,r.jsx)(n.em,{children:"Observable"})," values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function FrameWithAttributes(props: {\n    id: Dex.Observable<string>\n})\n    local frame = Dex.New("Frame")\n    frame:SetAttributes({\n        id = props.id,\n    })\n    return frame\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"When rendered, this component will generate a frame with attributes that adjusts\nto be equal to a state passed in via props:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local frame = FrameWithAttributes({\n    id = Dex.State("ValueFromProps")\n})\n'})}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)("img",{width:"80%",src:"/TutorialAssets/Chapter1/Directives/RenderedAttributes.png"})}),"\n",(0,r.jsx)(n.h2,{id:"defining-tags",children:"Defining Tags"}),"\n",(0,r.jsxs)(n.p,{children:["Dex also provides an ",(0,r.jsx)(n.code,{children:":AddTags()"})," directives, which adds\n",(0,r.jsx)(n.a,{href:"https://create.roblox.com/docs/reference/engine/classes/CollectionService",children:"CollectionService Tags"}),"\nto a VirtualInstance while it is being rendered."]}),"\n",(0,r.jsx)(n.p,{children:"The tag list can be an observable, and can also contain a list of observable\nstring values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function TaggedUIScaleConstraint(props: {\n    darkMode: Dex.Observable<boolean>\n})\n    local uiScale = Dex.New("UIScale")\n    frame:AddTags(props.darkMode:Map(function(darkModeEnabled)\n        if darkModeEnabled then\n            return {"ApplyDarkMode", "AutoScaling"}\n        else\n            return {"AutoScaling"}\n        end\n    end))\n    return uiScale\nend\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local uiScale = TaggedUIScaleConstraint({\n    darkMode = Dex.State(false)\n})\n"})}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)("img",{width:"80%",src:"/TutorialAssets/Chapter1/Directives/RenderedTags.png"})}),"\n",(0,r.jsx)(n.h2,{id:"connecting-events",children:"Connecting Events"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:":SetProperties()"})," directive can connect to listeners by providing a\nfunction as a value for an event name:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Button()\n    return Dex.Premade("GuiButton", {\n        Activated = function()\n            print("Button was pressed!")\n        end,\n    })\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, Dex provides a separate directive ",(0,r.jsx)(n.code,{children:":Connect()"})," which achieves\nthe same result:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Button()\n    local button = Dex.Premade("GuiButton")\n    button:Connect("Activated", function()\n        print("Button was pressed!")\n    end)\n    return button\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dex will automatically clean up the connection/disconnection of these event\nlisteners while a VirtualInstance is being rendered."}),"\n",(0,r.jsx)(n.h2,{id:"listening-to-property--attribute-changed-events",children:"Listening to Property & Attribute Changed events"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsxs)(n.a,{href:"https://dex.ambergracesoftware.com/api/VirtualInstance#OutProperty",children:[":OutProperty","()"]}),"\nand ",(0,r.jsxs)(n.a,{href:"https://dex.ambergracesoftware.com/api/VirtualInstance#OutProperty",children:[":OutAttribute","()"]}),"\ndirectives listen to changes in a specific property or attribute while the\nVirtualInstance is being rendered. These directives return an Observable\nobject which changes when the property or attribute changes, and are initialized\nto the value and type of the second argument passed into the directive:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function LabelComponent(props: {\n    text: Dex.Observable<string>m\n})\n    local label = Dex.Premade("TextLabel", {\n        Text = props.text,\n    })\n    -- Create an Observable which tracks the ContentText (translated text) of\n    -- the label in realtime. This observable initializes to an empty string\n    -- (second argument) until label is mounted and a ContentText is defined.\n    local contentText = label:OutProperty("Text", "")\n\n    -- Print whenever the translated text changes\n    label:SubscribeWhileMounted(contentText, function(currentContentText)\n        print("Translated text is", currentContentText)\n    end)\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"findchild-directive",children:"FindChild Directive"}),"\n",(0,r.jsx)(n.p,{children:"When working with premade VirtualInstance templates, you may commonly need to\ndefine a child VirtualInstance, then set it as a child of another\nVirtualInstance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local child = Dex.Premade("Frame")\nparentVirtualInstance:AddChild("ChildName", child)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:":FindChild()"})," directive conveniently simplifies this idiom into a single\nstatement:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local child = parentVirtualInstance:FindChild("ChildName")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"combining-virtualinstances",children:"Combining VirtualInstances"}),"\n",(0,r.jsxs)(n.p,{children:["Dex provides a special directive, ",(0,r.jsx)(n.a,{href:"/api/VirtualInstance#Combine",children:":Combine"}),",\nwhich combines the directive of one or more premade VirtualInstances with\nanother VirtualInstance. The VirtualInstances passed to the ",(0,r.jsx)(n.code,{children:":Combine()"}),"\ndirective must meet the following requirements:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'They must be of "Premade" type, with an equivalent or related ClassName to the\ntarget VirtualInstance.'}),"\n",(0,r.jsx)(n.li,{children:"They must not already be rendered by Dex and/or combined with another\nVirtualInstance."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function PrintOnPress()\n    return Dex.Premade("GuiButton", {\n        Activated = function()\n            print("Button was pressed!")\n        end,\n    })\nend\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Button()\n    local button = Dex.New("TextButton", {\n        Text = "Click Me!",\n    })\n    button:Combine(PrintOnPress())\n    return button\nend\n'})}),"\n",(0,r.jsx)(n.h2,{id:"lifecycle-callbacks",children:"Lifecycle Callbacks"}),"\n",(0,r.jsxs)(n.p,{children:["A VirtualInstance is ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Mounted"})})," when it is first rendered by Dex (either\npassed in as an argument to ",(0,r.jsxs)(n.a,{href:"/api/Root#Render",children:["Root",":Render","()"]}),", or created as a\nchild of another VirtualInstance). When the VirtualInstance stops being\nrendered, it is ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Unmounted"})}),", meaning any created instances, side effects,\netc. are automatically cleaned up by Dex."]}),"\n",(0,r.jsxs)(n.p,{children:["Dex provides the directives ",(0,r.jsxs)(n.a,{href:"/api/VirtualInstance#OnMont",children:[":OnMount","()"]})," and\n",(0,r.jsxs)(n.a,{href:"/api/VirtualInstance#OnUnmount",children:[":OnUnmount","()"]})," to listen to these events for\ncustom side effects."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Component()\n    local frame = Dex.New("Frame")\n    frame:OnMount(function()\n        print("Frame was mounted!")\n    end)\n    frame:OnUnmount(function()\n        print("Frame was unmounted!")\n    end)\n    return frame\nend\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.h2,{id:"subscribeonmounted-directive",children:"SubscribeOnMounted directive"}),(0,r.jsxs)(n.p,{children:["Dex provides the directive ",(0,r.jsxs)(n.a,{href:"/api/VirtualInstance#SubscribeWhileMounted",children:[":SubscribeOnMounted","()"]}),"\nto listen for changes to an Observable, and automatically clean up this listener\nwhen a VirtualInstance is no longer being rendered by Dex."]}),(0,r.jsxs)(n.p,{children:["Under the hood, ",(0,r.jsxs)(n.a,{href:"/api/VirtualInstance#SubscribeWhileMounted",children:[":SubscribeOnMounted","()"]}),"\nuses ",(0,r.jsx)(n.code,{children:":OnMount()"})," and ",(0,r.jsx)(n.code,{children:":OnUnmount()"})," to set up and take down the side effect of\nsubscribing to an observable:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function SubscribeWhileMounted<T>(\n    self: VirtualInstance,\n    input: Observable<T>,\n    listener: (T) -> (),\n    immediatelyCallListener: boolean\n)\n    local unsubscribe: (() -> ())? = nil\n    self:OnMount(function()\n        unsubscribe = input:Subscribe(listener, immediatelyCallListener)\n    end)\n    self:OnUnmount(function()\n        if unsubscribe then\n            unsubscribe()\n        end\n    end)\nend\n"})}),(0,r.jsx)(n.p,{children:"For custom side effects, this same pattern can be used to set up and take down\nthese custom effects while a VirtualInstance is being rendered."})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);