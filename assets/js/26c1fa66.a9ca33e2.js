"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5188],{77508:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Chapter1/StructuringComponents","title":"Structuring Dex Components","description":"The previous two sections cover the fundamentals of","source":"@site/docs/Chapter1/StructuringComponents.md","sourceDirName":"Chapter1","slug":"/Chapter1/StructuringComponents","permalink":"/docs/Chapter1/StructuringComponents","draft":false,"unlisted":false,"editUrl":"https://github.com/AmberGraceSoftware/Dex/edit/master/docs/Chapter1/StructuringComponents.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"defaultSidebar","previous":{"title":"Creating & Mapping State","permalink":"/docs/Chapter1/State"},"next":{"title":"Mapping Child Components","permalink":"/docs/Chapter1/MappingChildComponents"}}');var r=t(74848),o=t(28453);const i={sidebar_position:7},a="Structuring Dex Components",c={},l=[{value:"Using <em>Props</em> in Dex",id:"using-props-in-dex",level:2},{value:"Re-Using Components",id:"re-using-components",level:2},{value:"<em>Optionally Observable</em> Props",id:"optionally-observable-props",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structuring-dex-components",children:"Structuring Dex Components"})}),"\n",(0,r.jsxs)(n.p,{children:["The previous two sections cover the fundamentals of\n",(0,r.jsx)(n.a,{href:"./VirtualInstance",children:"Virtual Instances"})," and ",(0,r.jsx)(n.a,{href:"./State",children:"State"}),", and how to use to\nwrite reactive Components with Dex."]}),"\n",(0,r.jsxs)(n.p,{children:["This section will go over some conventions and best practices for ",(0,r.jsx)(n.em,{children:"structuring"}),"\nUI components with Dex."]}),"\n",(0,r.jsxs)(n.h2,{id:"using-props-in-dex",children:["Using ",(0,r.jsx)(n.em,{children:"Props"})," in Dex"]}),"\n",(0,r.jsx)(n.p,{children:"With Dex, you can define a UI Component that takes in as many parameters as\nneeded:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Component(text: string, position: UDim2)\n    return Dex.New("TextLabel", {\n        Text = text,\n        Position = position,\n        -- . . .\n    })\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["However, as more and more parameters are added to a UI component, it becomes\nincreasingly more confusing what each argument is responsible for, and what\norder they should be passed in. Because of this, the convention for Dex\nComponents is to always pass a single ",(0,r.jsx)(n.em,{children:"table"}),' argument to components called\n"props":']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Component(props)\n    -- Extract different named parameters from the props table.\n    local text = props.text\n    local position = props.position\n\n    return Dex.New("TextLabel", {\n        Text = text,\n        Position = position,\n        -- . . .\n    })\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Props"})," is a concept borrowed from\n",(0,r.jsx)(n.a,{href:"https://react.dev/learn/passing-props-to-a-component",children:"React"}),", and mirrors\nthe way new ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Virtual Instances"})})," are created:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'    local buttonText = Dex.State("Click Me!")\n    return Dex.New("TextButton", {\n        Activated = function()\n            buttonText:Set("Button was clicked!")\n        end,\n        Text = buttonText,\n        BorderSizePixel = 0,\n        BackgroundColor3 = Color3.fromHex("fff"),\n        Position = UDim2.fromScale(0.5, 0.5),\n        AnchorPoint = Vector2.new(0.5, 0.5),\n        Size = UDim2.fromScale(0.5, 0.1),\n        TextScaled = true,\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.a,{href:"/api/Dex#New",children:"Dex.New"}),' takes in three different types\nof objects as "properties" which work together to make an interactive UI:']}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Static Values"})," (e.g. ",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"UDim2"}),", ",(0,r.jsx)(n.code,{children:"Vector2"}),", and ",(0,r.jsx)(n.code,{children:"Color3"}),"), which do\nnot change over time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observable Values"})," (e.g. ",(0,r.jsx)(n.code,{children:"buttonText"}),"), which can change over time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Callbacks"})," (e.g. ",(0,r.jsx)(n.code,{children:"Activated = function() ... end"}),"), which connect to input\nevents"]}),"\n"]}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)("img",{width:"85%",src:"/TutorialAssets/Chapter1/Props/ClickyButton.gif"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(n.p,{children:["Props can also mirror this structure. Let's add a ",(0,r.jsx)(n.em,{children:"props"})," parameter to the\n",(0,r.jsx)(n.code,{children:"Button"})," component, allowing for ",(0,r.jsx)(n.code,{children:"Button"})," components to be instantiated multiple\ntimes in the UI. To do this, let's first lay out some design requirements:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Each button should have a different ",(0,r.jsx)(n.em,{children:"position"})]}),"\n",(0,r.jsxs)(n.li,{children:["Each button should have a different ",(0,r.jsx)(n.em,{children:"text"})," value, which can ",(0,r.jsx)(n.em,{children:"change over time"})]}),"\n",(0,r.jsxs)(n.li,{children:["Each button should ",(0,r.jsx)(n.em,{children:"do something different"})," when clicked."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["With these requirements in mind, let's write out the type for a ",(0,r.jsx)(n.em,{children:"props"})," table:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function Button(props: {\n    position: UDim2,\n    text: Dex.Observable<string>,\n    activated: () -> (),\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, we defined the structure of the props table using a ",(0,r.jsx)(n.em,{children:"type annotation"}),". Dex\nmakes use of ",(0,r.jsx)(n.a,{href:"https://luau-lang.org/typecheck",children:"Luau's Static Type System"}),", and\nit is recommended to give type annotations to the props table of Dex Components,\nwith ",(0,r.jsx)(n.code,{children:"--!strict"})," mode enabled where possible."]}),"\n",(0,r.jsxs)(n.p,{children:["The type annotation in the example above defines the following values in\n",(0,r.jsx)(n.code,{children:"props"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"position"}),": A ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Static UDim2"})})," value, representing where to place the\nbutton."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text"}),": An ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Observable string"})}),", representing the text to display with the\nbutton (which changes over time)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"activated"}),": A ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Callback"})})," function, which is called when the button is\npressed."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We can now refactor the ",(0,r.jsx)(n.code,{children:"Button"})," Component to utilize the three values we\ndefined in props, as well as utilize a\n",(0,r.jsx)(n.a,{href:"./VirtualInstance#using-premade-templates:~:text=Clone%20Virtual%20Instances%20are%20also%20created%20by%20Dex%2C%20but%20are%20created%20created%20by%20copying%20an%20existing%20template%2C%20passed%20in%20as%20the%20first%20argument%20to%20Dex.Clone()",children:"Cloned Template"}),"\nto simplify the code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function Button(props: {\n    position: UDim2,\n    text: Dex.Observable<string>,\n    activated: () -> (),\n})\n    return Dex.Clone(game.ReplicatedStorage.UITemplates.Button, {\n        Activated = props.activated,\n        Text = props.text,\n        Position = props.position,\n    })\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Finally, we can achieve the same result as our original example by passing in\nthe right props:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function Gui()\n    local buttonText = Dex.State("Click Me!")\n    local button = Button({\n        text = buttonText,\n        position = UDim2.fromScale(0.5, 0.5),\n        activated = function()\n            buttonText:Set("Thanks :3")\n        end,\n    })\n    return Dex.New("ScreenGui", {ResetOnSpawn = false}, {button})\nend\nroot:Render(Gui())\n'})}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)("img",{width:"85%",src:"/TutorialAssets/Chapter1/Props/ClickyButton2.gif"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(n.p,{children:["In Dex, the best practice for writing components is that ",(0,r.jsx)(n.strong,{children:"Components should\ntake in a single Props table as a parameter, and return a single VirtualInstance\ndepending on the value of these Props."})]}),"\n",(0,r.jsx)(n.h2,{id:"re-using-components",children:"Re-Using Components"}),"\n",(0,r.jsxs)(n.p,{children:["We just saw a way of using props to aid in the ",(0,r.jsx)(n.em,{children:"abstraction"})," of a UI component.\nDoing this also makes it easy to ",(0,r.jsx)(n.em,{children:"re-use"})," code for UI components that appear to\nthe user in multiple instances!"]}),"\n",(0,r.jsx)(n.p,{children:"Let's write a Dex Component that creates a button which reveals a secret message\nwhen clicked:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function SpoilerButton(props: {\n    previewText: string,\n    secretText: string,\n    position: UDim2,\n})\n    local secretIsShown = Dex.State(false)\n    return Dex.Clone(game.ReplicatedStorage.UITemplates.SpoilerButton, {\n        Activated = function()\n            if secretIsShown:Current() then\n                return\n            end\n            secretIsShown:Set(true)\n            task.wait(2)\n            secretIsShown:Set(false)\n        end,\n        Text = secretIsShown:Map(function(currentSecretIsShown)\n            if currentSecretIsShown then\n                return props.secretText\n            else\n                return props.previewText\n            end\n        end),\n        Position = props.position,\n    })\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.em,{children:"props"})," parameter takes in three static values, then uses\n",(0,r.jsx)(n.a,{href:"./State#mapping-observables",children:"Observable Mapping"})," to switch between showing the\npreview text and the secret text based on an internal ",(0,r.jsx)(n.code,{children:"boolean"})," state."]}),"\n",(0,r.jsxs)(n.p,{children:["We can now re-use the interactive ",(0,r.jsx)(n.code,{children:"SpoilerButton"})," component multiple times in\nour UI at once:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local function OpinionBio()\n    return Dex.New("ScreenGui", {ResetOnSpawn = false}, {\n        Button1 = SpoilerButton({\n            previewText = "Cats or Dogs?",\n            secretText = "Dogs",\n            position = UDim2.fromScale(0.5, 0.39),\n        }),\n        Button2 = SpoilerButton({\n            previewText = "Flavor of Ice Cream?",\n            secretText = "Strawberry",\n            position = UDim2.fromScale(0.5, 0.5),\n        }),\n        Button3 = SpoilerButton({\n            previewText = "Favorite Musician?",\n            secretText = "Erykah Badu",\n            position = UDim2.fromScale(0.5, 0.61),\n        }),\n    })\nend\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"SpoilerButton"})," uses a\n",(0,r.jsx)(n.a,{href:"./VirtualInstance#using-premade-templates",children:"Premade Template"}),", we can also\nadjust things like font, color, and padding in the UI without changing any of\nthe code itself:"]}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)("img",{width:"85%",src:"/TutorialAssets/Chapter1/Props/OpinionBio.gif"})}),"\n",(0,r.jsxs)(n.h2,{id:"optionally-observable-props",children:[(0,r.jsx)(n.em,{children:"Optionally Observable"})," Props"]}),"\n",(0,r.jsxs)(n.p,{children:["Props can define ",(0,r.jsx)(n.em,{children:"Static values"})," or ",(0,r.jsx)(n.em,{children:"Observable values"})," depending on the needs\nof a Component. However, there may be cases where you want to define a value\nthat can be either a Static value ",(0,r.jsx)(n.em,{children:"or"})," an Observable value"]}),"\n",(0,r.jsxs)(n.p,{children:["Dex provides a utility type ",(0,r.jsx)(n.a,{href:"/api/Dex#CanBeObservable",children:"CanBeObservable"}),", which\nallows for something to be a static value ",(0,r.jsx)(n.em,{children:"or"})," an Observable value in props.\nFor any value type ",(0,r.jsx)(n.code,{children:"T"}),", ",(0,r.jsx)(n.code,{children:"CanBeObservable<T>"})," is just shorthand for the\n",(0,r.jsx)(n.a,{href:"https://luau-lang.org/syntax#type-annotations:~:text=Additionally%2C%20the%20type,all%20possible%20types.",children:"union type"}),"\n",(0,r.jsx)(n.code,{children:"T | Observable<T>"}),' (i.e. "A value of type ',(0,r.jsx)(n.code,{children:"T"})," or of type ",(0,r.jsx)(n.code,{children:"Observable<T>"}),'")']}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"SpoilerButton"})," Component, we can use the ",(0,r.jsx)(n.code,{children:"CanBeObservable"})," type to allow\nboth a Static ",(0,r.jsx)(n.code,{children:"string"})," and an Observable ",(0,r.jsx)(n.code,{children:"string"})," to be defined in props for\n",(0,r.jsx)(n.code,{children:"previewText"})," and ",(0,r.jsx)(n.code,{children:"secretText"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function SpoilerButton(props: {\n    previewText: Dex.CanBeObservable<string>,\n    secretText: Dex.CanBeObservable<string>,\n    position: UDim2,\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we can create a spoiler button with a ",(0,r.jsx)(n.em,{children:"Static string"})," for ",(0,r.jsx)(n.code,{children:"previewText"}),",\nand an ",(0,r.jsx)(n.em,{children:"Observable string"})," for ",(0,r.jsx)(n.code,{children:"secretText"}),", which changes every 4 seconds:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local secret = Dex.State(tostring(math.random(1, 1000)))\ntask.spawn(function()\n    while task.wait(4) do\n        secret:Set(tostring(math.random(1, 1000)))\n    end\nend)\n\nlocal button = SpoilerButton({\n    previewText = "Reveal Secret Number",\n    secretText = secret,\n    position = UDim2.fromScale(0.5, 0.5)\n})\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In order to parse this in a Component, we will need to use a helper function\nprovided by Dex: ",(0,r.jsx)(n.a,{href:"/api/Dex#CoerceAsObservable",children:"CoerceAsObservable"}),". This\nfunction takes in an object that can be an observable (",(0,r.jsx)(n.code,{children:"CanBeObservable<T>"}),"),\nand returns an observable object (",(0,r.jsx)(n.code,{children:"Observable<T>"}),") of that same type."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's implement this in the ",(0,r.jsx)(n.code,{children:"SpoilerButton"})," component:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local function SpoilerButton(props: {\n    previewText: Dex.CanBeObservable<string>,\n    secretText: Dex.CanBeObservable<string>,\n    position: UDim2,\n})\n    -- Convert optionally observable props to Observable<string> objects\n    local previewText = Dex.CoerceAsObservable(props.previewText)\n    local secretText = Dex.CoerceAsObservable(props.secretText)\n\n    -- Derive the final text output from all observable objects' current values\n    local textOutput = Dex.Map(secretIsShown, previewText, secretText)(function(\n        currentSecretIsShown,\n        currentPreviewText,\n        currentSecretText\n    )\n        if currentSecretIsShown then\n            return currentSecretText\n        else\n            return currentPreviewText\n        end\n    end)\n\n    local secretIsShown = Dex.State(false)\n    return Dex.Clone(game.ReplicatedStorage.UITemplates.SpoilerButton, {\n        Activated = function()\n            if secretIsShown:Current() then\n                return\n            end\n            secretIsShown:Set(true)\n            task.wait(2)\n            secretIsShown:Set(false)\n        end,\n        Text = textOutput,\n        Position = props.position,\n    })\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SpoilerButton"})," Component will now work the same as it did before in the\n",(0,r.jsx)(n.code,{children:"OpinionBio"})," example, where ",(0,r.jsx)(n.code,{children:"secretText"})," is a ",(0,r.jsx)(n.em,{children:"static string"})," value, but will\nalso now work in cases where ",(0,r.jsx)(n.code,{children:"secretText"})," is an ",(0,r.jsx)(n.em,{children:"Observable string"}),":"]}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)("img",{width:"85%",src:"/TutorialAssets/Chapter1/Props/SecretNumber.gif"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"The conventions outlined in this section are helpful for writing reactive and\nre-usable Dex Components."}),"\n",(0,r.jsx)(n.p,{children:"The next section will cover one final aspect concept needed to scale up a Dex\nuser interface: dynamically Creating & Destroying UI Components based on state."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);