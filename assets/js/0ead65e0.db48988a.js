"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4848],{27664:e=>{e.exports=JSON.parse('{"functions":[{"name":"Play","desc":"Plays","params":[{"name":"params","desc":"","lua_type":"TweenParams<T>"}],"returns":[],"function_type":"method","source":{"line":182,"path":"src/Observables/Tween.luau"}}],"properties":[],"types":[{"name":"TweenParams<T>","desc":"","fields":[{"name":"info","lua_type":"TweenInfo,","desc":""},{"name":"goal","lua_type":"T,","desc":""},{"name":"start","lua_type":"T?,","desc":""},{"name":"completed","lua_type":"(() -> ())?,","desc":""},{"name":"cancelled","lua_type":"(() -> ())?,","desc":""}],"source":{"line":24,"path":"src/Observables/Tween.luau"}}],"name":"Tween","desc":"#### Inherits [Observable]\\n\\nWriteable observable which holds a value which can be re-assigned via\\n[State:Set]\\n\\n## Constructor\\n\\n---\\n\\n### Dex.Tween\\n\\n```ts\\nDex.Tween<T>(\\n    initialValueOrPlayInput: T | Observable<TweenParams<T>>\\n) -> Tween<T>\\n```\\n\\nCreates a new [Tween] observable which simulates transitions between values\\nover time.\\n\\nIf an initial value is passed in, the tween will start at the initial value\\nprovided must be played by calling the [Tween:Play] method\\n\\nIf an input observable is passed in, the tween will automatic play based on\\nwhenever that observable changes, using [TweenParams] specified by the input\\nobservable\'s current value.\\n\\nTweens can either be played by calling the `:Play()` method\\n```lua\\nlocal tween = Dex.Tween(0)\\ntween:Play({\\n    goal = 1,\\n    info = TweenInfo.new(0.1)\\n})\\n```\\n\\n\u2026or automatically play when an input state holding a params table changes:\\n```lua\\nlocal input = Dex.State(0)\\nlocal tween = Dex.Tween(Dex.Map(input)(function(currentInput)\\n    return {\\n        goal = input,\\n        info = TweenInfo.new(0.1)\\n    }\\nend))\\ninput:Set(1)\\n```\\n\\nBoth methods of tween dispatching can be useful in different scenarios.\\n\\n:::info\\nTweens must currently be ***Subscribed*** or ***Mounted*** to exhibit\\nexpected behavior. This is a requirement for all realtime-simulated\\nobservables, which enables safe garbage collection when writing Dex\\ncomponents.\\n:::","tags":["Observable"],"source":{"line":86,"path":"src/Observables/Tween.luau"}}')}}]);