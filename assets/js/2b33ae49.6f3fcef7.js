"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2046],{52178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Chapter1/VirtualInstance","title":"Virtual Instances","description":"Before We Begin...","source":"@site/docs/Chapter1/VirtualInstance.md","sourceDirName":"Chapter1","slug":"/Chapter1/VirtualInstance","permalink":"/docs/Chapter1/VirtualInstance","draft":false,"unlisted":false,"editUrl":"https://github.com/AmberGraceSoftware/Dex/edit/master/docs/Chapter1/VirtualInstance.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"Installation","permalink":"/docs/Installation"},"next":{"title":"Creating & Mapping State","permalink":"/docs/Chapter1/State"}}');var a=t(74848),o=t(28453);const s={sidebar_position:4},r="Virtual Instances",c={},l=[{value:"Before We Begin...",id:"before-we-begin",level:2},{value:"UI Components",id:"ui-components",level:2},{value:"<code>CoinCounter</code> Component",id:"coincounter-component",level:2},{value:"Using Premade templates",id:"using-premade-templates",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"virtual-instances",children:"Virtual Instances"})}),"\n",(0,a.jsx)(n.h2,{id:"before-we-begin",children:"Before We Begin..."}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"../Installation",children:"Installation Section"})," to make sure Dex is properly\ninstalled in your Roblox project."]}),"\n",(0,a.jsx)(n.h2,{id:"ui-components",children:"UI Components"}),"\n",(0,a.jsxs)(n.p,{children:["At its heart, Dex is a language for writing ",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Components"})}),". Components are\nportions of code responsible for specific portions of UI, and building\nlarge-scale user interfaces with Dex requires breaking your UI down into these\nsmall building blocks."]}),"\n",(0,a.jsx)(n.p,{children:"To illustrate this, imagine a Roblox game displays a shop menu to the player\nupon speaking to an NPC. The menu that pops up might look something like this:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"NPC Shop",src:t(68222).A+"",width:"2152",height:"1292"})}),"\n",(0,a.jsx)(n.p,{children:"This menu contains multiple different visual elements, which can be grouped\ntogether based on location and shared function:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"NPC Shop UI Breakdown",src:t(71312).A+"",width:"2152",height:"1296"})}),"\n",(0,a.jsxs)(n.p,{children:["In Dex, Components are ",(0,a.jsx)(n.em,{children:"functions"}),", named in ",(0,a.jsx)(n.code,{children:"PascalCase"}),", which take in some\ninput parameters, and output a description of how a specific piece of UI is put\ntogether."]}),"\n",(0,a.jsx)(n.p,{children:"In the example of an NPC shop menu, the whole menu can be represented as 6 Dex\nComponents:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ShopHeader"})," - Shows the current display name for the NPC's shop"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CoinCounter"})," - Displays many coins the user currently has"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"TextButton"})," - Displays certain text, darkens in color when hovered/pressed,\nand performs some action when clicked on."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ShopItems"})," - Manages which shop items are appearing to the user at a time,\nand decides what happens when the left/right buttons are pressed."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ShopItem"})," - Displays info about a single ingame item\u2014its cost, a thumbnail,\nand a display name\u2014and performs some action when the circle is clicked on."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"NPCShop"})," - A top-level component which contains all of the above components,\nand describes how they are all laid out together."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"NPC Shop Component Breakdown",src:t(59672).A+"",width:"2160",height:"1294"})}),"\n",(0,a.jsxs)(n.h2,{id:"coincounter-component",children:[(0,a.jsx)(n.code,{children:"CoinCounter"})," Component"]}),"\n",(0,a.jsxs)(n.p,{children:["Let's write the CoinCounter component defined in the example above. In\nDex, instances are not directly created using ",(0,a.jsx)(n.code,{children:"Instance.new"}),"; instead, Dex\ncomponents use ",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Virtual Instances"})})," to describe how a UI component is pieced\ntogether and interacted with, which Dex then uses to create, destroy, and modify\nreal instances exactly when needed."]}),"\n",(0,a.jsxs)(n.p,{children:["To describe the ",(0,a.jsx)(n.code,{children:"CoinsCounter"})," component, we need at least two Instances: a\n",(0,a.jsx)(n.code,{children:"TextLabel"})," and an ",(0,a.jsx)(n.code,{children:"ImageLabel"}),". We will represent these as\n",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Virtual Instances"})})," using the function ",(0,a.jsx)(n.a,{href:"/api/Dex#New",children:"Dex.New"}),", which\ntakes in a ClassName and a property table as arguments."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local coinsLabel = Dex.New("TextLabel", {\n    Text = "42",\n    TextScaled = true,\n    TextColor3 = Color3.fromRGB(255, 252, 238),\n    Font = Enum.Font.Antique,\n    TextXAlignment = Enum.TextXAlignment.Right,\n    BackgroundTransparency = 1,\n    Size = UDim2.fromScale(0.675, 1),\n})\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local coinsIcon = Dex.New("ImageLabel", {\n    Image = "rbxassetid://14319400598",\n    BackgroundTransparency = 1,\n    Size = UDim2.fromScale(0.8, 0.8),\n    SizeConstraint = Enum.SizeConstraint.RelativeYY,\n    Position = UDim2.fromScale(0.7, 1),\n    AnchorPoint = Vector2.new(0, 1),\n})\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To embed the image and text labels within a frame, we can pass a third\n",(0,a.jsx)(n.em,{children:"children"})," argument to ",(0,a.jsx)(n.code,{children:"Dex.New"}),", which is a table where the keys are the name\nof the child, and the values are the virtual instance to embed under the parent:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local coinCounter = Dex.New("Frame", {\n    Size = UDim2.fromScale(0.3, 0.4),\n    Position = UDim2.fromScale(1, 0.5),\n    AnchorPoint = Vector2.new(1, 0.5),\n    BackgroundTransparency = 1,\n}, {\n    CoinsLabel = coinsLabel,\n    CoinsIcon = coinsCounter,\n})\n'})}),"\n",(0,a.jsx)(n.p,{children:"So far, this translates to the following instance tree:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Instance Tree Visualization",src:t(21546).A+"",width:"344",height:"116"})}),"\n",(0,a.jsxs)(n.p,{children:["In order to make this a proper ",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Dex Component"})}),", we should create a\nfunction named ",(0,a.jsx)(n.code,{children:"CoinCounter"})," which returns this virtual instance tree."]}),"\n",(0,a.jsxs)(n.p,{children:["And finally, in order to playtest our ",(0,a.jsx)(n.code,{children:"CoinCounter"})," component, we will need to\ncreate a ",(0,a.jsx)(n.a,{href:"/api/Root",children:"Root"})," object, which translates the virtual instances into\nreal instances:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function CoinCounter()\n    return Dex.New("Frame", {\n        Size = UDim2.fromScale(0.3, 0.4),\n        Position = UDim2.fromScale(1, 0.5),\n        AnchorPoint = Vector2.new(1, 0.5),\n        BackgroundTransparency = 1,\n    }, {\n        CoinsLabel = Dex.New("TextLabel", {\n            Text = "42",\n            TextScaled = true,\n            TextColor3 = Color3.fromRGB(255, 252, 238),\n            Font = Enum.Font.Antique,\n            TextXAlignment = Enum.TextXAlignment.Right,\n            BackgroundTransparency = 1,\n            Size = UDim2.fromScale(0.675, 1),\n        }),\n        CoinsIcon = Dex.New("ImageLabel", {\n            Image = "rbxassetid://14319400598",\n            BackgroundTransparency = 1,\n            Size = UDim2.fromScale(0.8, 0.8),\n            SizeConstraint = Enum.SizeConstraint.RelativeYY,\n            Position = UDim2.fromScale(0.7, 1),\n            AnchorPoint = Vector2.new(0, 1),\n        }),\n        -- Make the component look consistent on different screens\n        AspectRatio = Dex.New("UIAspectRatioConstraint", {\n            AspectRatio = 4,\n        })\n    })\nend\n\n-- Here, we define a top-level component which holds our CoinCounter\nlocal function Gui()\n    return Dex.New("ScreenGui", {\n        ResetOnSpawn = false,\n    }, {\n        CoinCounter = CoinCounter(),\n    })\nend\n\n-- root:Render() tells Dex to convert out VirtualInstances into real instances\nlocal root = Dex.Root(game.Players.LocalPlayer:WaitForChild("PlayerGui"))\nroot:Render(Gui())\n'})}),"\n",(0,a.jsx)(n.p,{children:'When playtesting with the above code in a LocalScript, the coins component will\nrender with a static "42" being displayed.'}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Coin Counter Ingame",src:t(61415).A+"",width:"1574",height:"890"})}),"\n",(0,a.jsx)(n.p,{children:"The next section will go over how we can reactively update the UI to match the\nactual value of a player's coins. For now, let's go over one way we can\nsignificantly simplify this code: By using a premade template"}),"\n",(0,a.jsx)(n.h2,{id:"using-premade-templates",children:"Using Premade templates"}),"\n",(0,a.jsx)(n.p,{children:"Going back to the CoinCounter component, there's a lot of information being\ndefined in code that is already easy to just create in Roblox Studio's UI\neditor. Dex is a versatile library, in that you can define as much or as little\ninformation in the code itself as you need."}),"\n",(0,a.jsxs)(n.p,{children:["We've seen VirtualInstances be created with ",(0,a.jsx)(n.code,{children:"Dex.New"}),", but Dex actually has\nthree distinct types of VirtualInstances: ",(0,a.jsx)(n.code,{children:"New"}),", ",(0,a.jsx)(n.code,{children:"Clone"}),", and ",(0,a.jsx)(n.code,{children:"Premade"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/api/Dex#New",children:(0,a.jsx)(n.code,{children:"New"})})," Virtual Instances are created by the Dex library itself,\nas seen in the previous example."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/api/Dex#Clone",children:(0,a.jsx)(n.code,{children:"Clone"})})," Virtual Instances are also created by Dex, but are\ncreated created by copying an existing template, passed in as the first argument\nto ",(0,a.jsx)(n.code,{children:"Dex.Clone()"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/api/Dex#Premade",children:(0,a.jsx)(n.code,{children:"Premade"})})," Virtual Instances, on the other hand, are only\n",(0,a.jsx)(n.em,{children:"modified"})," by Dex, without creating or destroying any additional instance."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Going back to the ",(0,a.jsx)(n.code,{children:"CoinCounter"})," component, we can greatly simplify the code by\nrepresent our component as a tree of ",(0,a.jsx)(n.code,{children:"Premade"})," Virtual Instances, using this\ndownloadable template:"]}),"\n",(0,a.jsx)("a",{href:"/TutorialAssets/Chapter1/VirtualInstance/PremadeCoinCounter.rbxmx",download:!0,target:"_blank",children:"(Premade Template Download)"}),"\n",(0,a.jsx)(n.p,{children:"This can be placed directly in StarterGui and used by Dex:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Premade Coin Counter UI in StarterGui",src:t(81919).A+"",width:"440",height:"220"})}),"\n",(0,a.jsxs)(n.p,{children:["Once the template is in place, the ",(0,a.jsx)(n.code,{children:"CoinCounter"})," component's code can be greatly\nsimplified to only modify the text of the CoinsLabel object, since that is the\nonly part of this component which actually needs to change as the player plays\nthe game:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-lua",children:'local function CoinCounter()\n    return Dex.Premade("Frame", {}, {\n        CoinsLabel = Dex.Premade("TextLabel", {\n            Text = "42",\n        })\n    })\nend\n\nlocal function Gui()\n    return Dex.Premade("ScreenGui", {}, {\n        CoinCounter = CoinCounter(),\n    })\nend\n\nlocal root = Dex.Root(game.Players.LocalPlayer\n\t:WaitForChild("PlayerGui"):WaitForChild("PremadeGui"))\nroot:Render(Gui())\n'})}),"\n",(0,a.jsx)(n.p,{children:'Upon playtesting, everything will look exactly the same as it did vefore, only\nthat our code has shrunk in size significantly. To make changes to this UI, we\ncan simply modify the template; the code will still update the CoinsLabel\'s\ntext to "42" as it did before.'}),"\n",(0,a.jsxs)(n.p,{children:['Right now this UI displays the number "42", but doesn\'t change at currently. The\nnext section will show how we can use ',(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"States"})})," to create a UI that updates\nreactively when things happen in the game world (like picking up a coin, or\nperforming a transaction)."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.a,{href:"https://www.flaticon.com/free-icons/coin",children:"Coin icon created by Freepik - Flaticon."})})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Assets provided for download in this article are provided for educational\npurposes only. License is not extended by the maintainers of Dex to use the\nprovided coin icon in any project, and is subject to FlatIcon's original\n",(0,a.jsx)(n.a,{href:"https://www.freepikcompany.com/legal#nav-flaticon-agreement",children:"license agreement"})]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},81919:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/CoinCounterFull-8652f1850c698d532ee1924005995f72.jpg"},61415:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/CoinCounterIngame-5905816e18260a25f14b398aae56aff4.jpg"},21546:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/CoinCounterSimple-16a9a61eded5d4ff6bf5247d8591c971.jpg"},68222:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/GecsSeafaringSupplies-04aeb40ed37a28b98c50e072b76853f5.jpg"},71312:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/GecsSeafaringSuppliesComponentBreakdown-10f37aa4ba58e1eb827cf2439aeb1d30.jpg"},59672:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/GecsSeafaringSuppliesComponentBreakdown2-0e9d1c5bdba0ba9233958ad372357d8f.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);